// 関数定義　十干から十干数を算出する
//  c = zouKan(a, b)
//  b = juKanNo( a )
//   a: 十干を表す文字（'甲','乙',・・・,'癸'）
//   b: 十干を表す数字（'0','1',・・・,'9' ）

juKanNo(String a) {
  int b = 9;
  if (a == '甲') {
    b = 0;
  } else if (a == '乙') {
    b = 1;
  } else if (a == '丙') {
    b = 2;
  } else if (a == '丁') {
    b = 3;
  } else if (a == '戊') {
    b = 4;
  } else if (a == '己') {
    b = 5;
  } else if (a == '庚') {
    b = 6;
  } else if (a == '辛') {
    b = 7;
  } else if (a == '壬') {
    b = 8;
  } else if (a == '癸') {
    b = 9;
  } else {}
  return b;
}

// 関数定義　十二支から十二支数を算出する
//  b = juuniSiNo( a )
//   a: 十二支を表す文字（'子','丑',・・・,'亥'）
//   b: 十二支を表す数字（'0','1',・・・,'11' ）
juuniSiNo(String a) {
  int b = 11;
  if (a == '子') {
    b = 0;
  } else if (a == '丑') {
    b = 1;
  } else if (a == '寅') {
    b = 2;
  } else if (a == '卯') {
    b = 3;
  } else if (a == '辰') {
    b = 4;
  } else if (a == '巳') {
    b = 5;
  } else if (a == '午') {
    b = 6;
  } else if (a == '未') {
    b = 7;
  } else if (a == '申') {
    b = 8;
  } else if (a == '酉') {
    b = 9;
  } else if (a == '戌') {
    b = 10;
  } else if (a == '亥') {
    b = 11;
  } else {}
  //b = 11;
  return b;
}

// 関数定義　文字列リストから検索文字列が先頭から何文字目にあるか返す
//  c = nanmojime(a,b)
//  a:　120文字（2文字×60組）の文字列リスト
//  b:　2文字の検索文字
//  c:　-2：一致が2組以上ある
//      -1:一致する組がない
//      0 ～ 59 : 組めに1組だけある
int rokujuKansiNo(String mojilist, String kensaku2moji) {
  int nanbanme = -1;
  int ittisuu = 0;
  for (int i = 0; i < 60; i++) {
    String nimoji = mojilist.substring(i * 2, i * 2 + 2);
    if (nimoji == kensaku2moji) {
      nanbanme = i;
      ittisuu = ittisuu + 1;
    } else {}
  }
  if (ittisuu > 1) {
    nanbanme = -2;
  } else if (ittisuu < 1) {
    nanbanme = -1;
  } else {}
  return nanbanme;
}

// 関数定義　干支から対応する西暦年と年齢を119歳までの間で算出する
//   c = kannsiHeirin(a,b)
//   a: 干支No.を表す0～59の数字　（　0:甲子　1:乙丑　～　58:壬戌　59:癸亥　）
//   b: 生年月日を表す文字列　（yyyy-MM-dd）
//   c: 干支併臨の年を表す 数字の配列（　[0,0,1961,2021,0] )
//
List kansiHeirin(int kansiSuu, String seinengappiMojiretu) {
  List kansiHeirinList = [];
  // 生年月日（文字列）を　（DateTime型）に変換する
  DateTime date3 = DateTime.parse(seinengappiMojiretu); // StringからDate
  int seinen = int.parse(seinengappiMojiretu.substring(0, 4));
  DateTime date4 = DateTime(seinen, 2, 4);
  //　1900.1.1 (甲辰）から誕生日までの日数を算出する
  var nissuu = date3.difference(date4).inDays;
  if (nissuu < 0) {
    --seinen;
  }
  int nen = 0;
  for (int i = 0; i < 6; ++i) {
    nen = 1864 + 60 * i + kansiSuu;
    if (nen <= seinen) {
      kansiHeirinList.add(0);
    } else if (nen > seinen + 120) {
      kansiHeirinList.add(0);
    } else {
      kansiHeirinList.add(nen);
    }
  }
  // print('■■■■kansiHeirinList:$kansiHeirinList');
  return kansiHeirinList;
}

// // 関数定義　生年月日から　年柱の六十干支を算出する
// //  b = nentyuu(a)
// //   a: 生年月日を表す文字列　（yyyy-MM-dd）
// //   b: 年柱の六十干支を表す数字　（0～59）（例　0:　甲子）
// //
// int nentyuu(String a) {
//   // 生年月日（文字列）を　（DateTime型）に変換する
//   DateTime date3 = DateTime.parse(a); // StringからDate
//   int seinen = int.parse(a.substring(0, 4));
//   DateTime date4 = DateTime(seinen, 2, 4);
//   //　1900.1.1 (甲辰）から誕生日までの日数を算出する
//   var nissuu = date3.difference(date4).inDays;
//   if (nissuu < 0) {
//     --seinen;
//   }
//   var kansiSui = (seinen - 1924) % 60;
//   return kansiSui;
// }

// 関数定義　天運到来の西暦とその時を迎える満年齢と種類を西暦昇順に並べる配列を生成する
//  f = tenUn(a,b,c,d,e)
//  a: 干支併臨（年）の年を表す 数字の配列（　[0,0,0,2017,0] )
//  b: 干支併臨（月）の年を表す 数字の配列（　[0,0,0,0,0] )
//  c: 干支併臨（日）の年を表す 数字の配列（　[0,0,1962,2022,0] )
//  d: 天地徳合　　　の年を表す 数字の配列（　[0,0,0,2007,0] )
//  e: 生年月日を表す文字列　（yyyy-MM-dd）
//　f: 天運到来の年yyyy立春時の満年齢GG種類nを表す数字配列
//              [yyyyGGn]  n: 1: 干支併臨（年柱）
//                            2: 干支併臨 (月柱）
//                            3: 干支併臨 (日柱）
//                            4: 天地徳合
//          例　[19620053,19630062,20070504,20170601,20220653,20230662]
//
List tenUn(List a, List b, List c, List d, String e) {
  List<int> tenunNen = [];
  int nen = 0;
  // 生年月日（文字列）を　（DateTime型）に変換する
  DateTime date3 = DateTime.parse(e); // StringからDate
  int tenunMei;
  List nenList = [];
  // 年柱
  nenList = a;
  tenunMei = 1;
  for (int i = 0; i < 6; ++i) {
    nen = nenList.removeAt(0);
    if (nen != 0) {
      DateTime date4 = DateTime(nen, 2, 4);
      var nissuu = date4.difference(date3).inDays;
      //print('nissuu:$nissuu');
      var nenrei = nissuu ~/ 365.2422;
      var tenunDate = nen * 10000 + nenrei * 10 + tenunMei;
      tenunNen.add(tenunDate);
    } else {}
  }
  // 月柱
  nenList = b;
  tenunMei = 2;
  for (int i = 0; i < 6; ++i) {
    nen = nenList.removeAt(0);
    if (nen != 0) {
      DateTime date4 = DateTime(nen, 2, 4);
      var nissuu = date4.difference(date3).inDays;
      var nenrei = nissuu ~/ 365.2422;
      var tenunDate = nen * 10000 + nenrei * 10 + tenunMei;
      tenunNen.add(tenunDate);
    } else {}
  }
  // 日柱
  nenList = c;
  tenunMei = 3;
  for (int i = 0; i < 6; ++i) {
    nen = nenList.removeAt(0);
    if (nen != 0) {
      DateTime date4 = DateTime(nen, 2, 4);
      var nissuu = date4.difference(date3).inDays;
      var nenrei = nissuu ~/ 365.2422;
      var tenunDate = nen * 10000 + nenrei * 10 + tenunMei;
      tenunNen.add(tenunDate);
    } else {}
  }
  // 天地徳合
  nenList = d;
  tenunMei = 4;
  for (int i = 0; i < 6; ++i) {
    nen = nenList.removeAt(0);
    if (nen != 0) {
      DateTime date4 = DateTime(nen, 2, 4);
      var nissuu = date4.difference(date3).inDays;
      var nenrei = nissuu ~/ 365.2422;
      var tenunDate = nen * 10000 + nenrei * 10 + tenunMei;
      tenunNen.add(tenunDate);
    } else {}
  }
  // 西暦昇順にソートする
  tenunNen.sort((num1, num2) => num1 - num2);
  //print('■■■■tenunNen:$tenunNen');
  return tenunNen;
}

// 六十干支リストを生成する　（String rokujukkansi　の文字列をつくるため）
//String rokujuuKansi = '';
//for (int i = 0; i < 60; i++) {
//  var j = i % 10;
//  var k = i % 12;
//  var kan = jukkan.substring(j, j + 1);
//  var si = juunisi.substring(k, k + 1);
//  rokujuuKansi = rokujuuKansi + kan + si;
//  print('$i');
//  print('$j');
//  print('$k');
//  print('$rokujuuKansi');
//};
// 関数定義　地支から蔵干を算出する

//   a: 地支を表す文字列　（'子','丑','寅',・・・,'戌','亥')
//   b: 節入り日からの日数を表す数字　（1～31）（節入り日は、1　とする）
//   c: 蔵干を表す文字列　（'甲','乙','甲',・・・'壬','癸')
zouKan(String a, int b) {
  //蔵干表
  String zouKanHyou = //蔵干表
      '戊戊戊戊戊戊戊丙丙丙丙丙丙丙甲甲甲甲甲甲甲甲甲甲甲甲甲甲甲甲甲' //寅
      '甲甲甲甲甲甲甲甲甲甲乙乙乙乙乙乙乙乙乙乙乙乙乙乙乙乙乙乙乙乙乙' //卯
      '乙乙乙乙乙乙乙乙乙癸癸癸戊戊戊戊戊戊戊戊戊戊戊戊戊戊戊戊戊戊戊' //辰
      '戊戊戊戊戊庚庚庚庚庚庚庚庚庚庚丙丙丙丙丙丙丙丙丙丙丙丙丙丙丙丙' //巳
      '丙丙丙丙丙丙丙丙丙丙己己己己己己己己己己丁丁丁丁丁丁丁丁丁丁丁' //午
      '丁丁丁丁丁丁丁丁丁乙乙乙己己己己己己己己己己己己己己己己己己己' //未
      '己己己己己己己壬壬壬壬壬壬庚庚庚庚庚庚庚庚庚庚庚庚庚庚庚庚庚庚' //申
      '庚庚庚庚庚庚庚庚庚庚辛辛辛辛辛辛辛辛辛辛辛辛辛辛辛辛辛辛辛辛辛' //酉
      '辛辛辛辛辛辛辛辛辛丁丁丁戊戊戊戊戊戊戊戊戊戊戊戊戊戊戊戊戊戊戊' //戌
      '戊戊戊戊戊戊戊甲甲甲甲甲壬壬壬壬壬壬壬壬壬壬壬壬壬壬壬壬壬壬壬' //亥
      '壬壬壬壬壬壬壬壬壬壬癸癸癸癸癸癸癸癸癸癸癸癸癸癸癸癸癸癸癸癸癸' //子
      '癸癸癸癸癸癸癸癸癸辛辛辛丁丁丁丁丁丁丁丁丁丁丁丁丁丁丁丁丁丁丁'; //丑

  int d = 12;
  int i = 372;
  String c = '・';
  //地支（文字データ）を地支数（数字）に変換する
  if (a == '子') {
    d = 10;
  } else if (a == '丑') {
    d = 11;
  } else if (a == '寅') {
    d = 0;
  } else if (a == '卯') {
    d = 1;
  } else if (a == '辰') {
    d = 2;
  } else if (a == '巳') {
    d = 3;
  } else if (a == '午') {
    d = 4;
  } else if (a == '未') {
    d = 5;
  } else if (a == '申') {
    d = 6;
  } else if (a == '酉') {
    d = 7;
  } else if (a == '戌') {
    d = 8;
  } else if (a == '亥') {
    d = 9;
  } else {
    //print('■■■■■■■■■蔵干算出でエラーが発生しました。十二支以外の文字を検出しました。');
  }
//文字を取り出す場所（index）を算出する
  i = (d * 31) + b - 1;
  //print('■■■■a:$a');
  //print('■■■■b:$b');
  //print('■■■■d:$d');
  //print('■■■■i:$i');
  c = zouKanHyou.substring(i, i + 1);

  return c;
}

// 関数定義
//  d = meisiki(a,b,c)
// a: 西暦年（1920年〜2029年）数字
// b: 月の数字
// c: 日の習字
// d: 命式（年柱/月柱/日柱）（例：甲子乙丑丙寅）の6文字

String meisiki(int a, int b, int c) {
  // 定数定義
  int nenchuNen = a;
  String jukkan = "甲乙丙丁戊己庚辛壬癸"; //十干リスト
  String juunisi = "子丑寅卯辰巳午未申酉戌亥"; //十二支リスト
  String rokujukkansi = // 60干支リスト
      "甲子乙丑丙寅丁卯戊辰己巳庚午辛未壬申癸酉"
      "甲戌乙亥丙子丁丑戊寅己卯庚辰辛巳壬午癸未"
      "甲申乙酉丙戌丁亥戊子己丑庚寅辛卯壬辰癸巳"
      "甲午乙未丙申丁酉戊戌己亥庚子辛丑壬寅癸卯"
      "甲辰乙巳丙午丁未戊申己酉庚戌辛亥壬子癸丑"
      "甲寅乙卯丙辰丁巳戊午己未庚申辛酉壬戌癸亥";
  String setuiriNitiL = // 節入り日リスト・2文字・1920年1月から2029年12月まで
      '060506050606070808080807' //1920
      '060406050606080808090808' //1921
      '060406050606080808090808' //1922
      '060506060607080809090808' //1923
      '060506050606070808080807' //1924
      '060406050606080808090807' //1925
      '060406050606080808090808' //1926
      '060506060607080809090808' //1927
      '060506050606070808080807' //1928
      '060406050606080808090807' //1929
      '060406050606080808090808' //1930
      '060506060607080809090808' //1931
      '060506050606070808080707' //1932
      '060406050606070808090807' //1933
      '060406050606080808090808' //1934
      '060506060607080808090808' //1935
      '060506050606070808080707' //1936
      '060406050606070808090807' //1937
      '060406050606080808090808' //1938
      '060506060606080808090808' //1939
      '060506050606070808080707' //1940
      '060406050606070808090807' //1941
      '060406050606080808090808' //1942
      '060506060606080808090808' //1943
      '060506050606070808080707' //1944
      '060406050606070808090807' //1945
      '060406050606080808090808' //1946
      '060506060606080808090808' //1947
      '060506050506070808080707' //1948
      '060406050606070808090807' //1949
      '060406050606080808090808' //1950
      '060506050606080808090808' //1951
      '060506050506070708080707' //1952
      '060406050606070808080807' //1953
      '060406050606080808090808' //1954
      '060406050606080808090808' //1955
      '060505050506070708080707' //1956
      '050406050606070808080807' //1957
      '060406050606080808090807' //1958
      '060406050606080808090808' //1959
      '060505050506070708080707' //1960
      '050406050606070808080807' //1961
      '060406050606070808090807' //1962
      '060406050606080808090808' //1963
      '060505050506070707080707' //1964
      '050406050606070808080807' //1965
      '060406050606070808090807' //1966
      '060406050606080808090808' //1967
      '060505050506070707080707' //1968
      '050406050606070808080707' //1969
      '060406050606070808090807' //1970
      '060406050606080808090808' //1971
      '060505050505070707080707' //1972
      '050406050606070808080707' //1973
      '060406050606070808090807' //1974
      '060406050606080808090808' //1975
      '060505050505070707080707' //1976
      '050406050606070808080707' //1977
      '060406050606070808090807' //1978
      '060406050606080808090808' //1979
      '060505050505070707080707' //1980
      '050406050506070708080707' //1981
      '060406050606070808090807' //1982
      '060406050606080808090808' //1983
      '060505040505070707080707' //1984
      '050406050506070708080707' //1985
      '060406050606070808080807' //1986
      '060406050606080808090808' //1987
      '060405040505070707080707' //1988
      '050405050506070708080707' //1989
      '050406050606070808080807' //1990
      '060406050606070808090807' //1991
      '060405040505070707080707' //1992
      '050405050506070708080707' //1993
      '050406050606070808080807' //1994
      '060406050606070808090807' //1995
      '060405040505070707080707' //1996
      '050405050506070707080707' //1997
      '050406050606070808080807' //1998
      '060406050606070808090807' //1999
      '060405040505070707080707' //2000
      '050405050505070707080707' //2001
      '050406050606070808080707' //2002
      '060406050606070808090807' //2003
      '060405040505070707080707' //2004
      '050405050505070707080707' //2005
      '050406050606070808080707' //2006
      '060406050606070808090807' //2007
      '060405040505070707080707' //2008
      '050405050505070707080707' //2009
      '050406050506070708080707' //2010
      '060406050606070808090807' //2011
      '060405040505070707080707' //2012
      '050405050505070707080707' //2013
      '050406050506070708080707' //2014
      '060406050606070808080807' //2015
      '060405040505070707080707' //2016
      '050405040505070707080707' //2017
      '050406050506070708080707' //2018
      '060406050606070808080807' //2019
      '060405040505070707080707' //2020
      '050305040505070707080707' //2021
      '050405050506070708080707' //2022
      '060406050606070808080807' //2023
      '060405040505060707080707' //2024
      '050305040505070707080707' //2025
      '050405050506070707080707' //2026
      '050406050606070808080807' //2027
      '060405040505060707080706' //2028
      '050305040505070707080707' //2029
      '';
  // 日柱の六十干支を算出する
  DateTime nenGaPi = DateTime(a, b, c); // 年月日のDateTime型
  int nissuu = nenGaPi.difference(DateTime(1900, 1, 1)).inDays; // 1900.1.1からの日数
  int nikkan = nissuu % 10; // 日干No.を算出
  String nikkanMoji = jukkan.substring(nikkan, nikkan + 1); //日干を算出
  int nissi = (nissuu + 10) % 12; // 日支No.を算出
  String nissiMoji = juunisi.substring(nissi, nissi + 1); //日支を算出
  String nichu = nikkanMoji + nissiMoji;
  // 年と月から仮の節入り日・時・分を算出する
  int setuiriNen = a; // 仮の節入り年として、年を代入する
  int setuiriGe = b; // 仮の節入り月として、月を代入する
  int setuIndex = (setuiriNen - 1920) * 12 + (setuiriGe - 1); //
  String setuiriNitiS = // 仮の節入り日の文字
      setuiriNitiL.substring(setuIndex * 2, (setuIndex + 1) * 2);
  int setuiriNiti = int.parse(setuiriNitiS); // 仮の節入り日
  DateTime setuiribi2 = DateTime(setuiriNen, setuiriGe, setuiriNiti);
  int setuirinitisuu = nenGaPi.difference(setuiribi2).inDays; // 仮の節入り日からの日数
  // 仮の節入り日を迎えていない場合
  if (setuirinitisuu < 0) {
    if (b == 1) {
      setuiriNen = setuiriNen - 1; // 1月の場合
      nenchuNen = a - 1;
    } else if (b == 2) {
      nenchuNen = a - 1; // 2月の場合
    } else {} // 3月〜12月の場合
    setuiriGe = (b - 2) % 12 + 1;
  } else {
    if (b == 1) {
      nenchuNen = a - 1;
    } else {}
  }
  // 修正された節入り日時のためのIndexから節入り日時を算出する
  setuIndex = (setuiriNen - 1920) * 12 + (setuiriGe - 1); //
  // 年柱を算出する
  int nenchuNo = (nenchuNen - 1900 + 36) % 60; // 年柱No.を算出する・補正値36
  String nenchu =
      rokujukkansi.substring(nenchuNo * 2, (nenchuNo + 1) * 2); // 年柱
  // 月柱を算出する
  int gechuNo = (setuIndex + 13) % 60; // 月柱No.を算出する・補正値13
  String gechu = rokujukkansi.substring(gechuNo * 2, (gechuNo + 1) * 2); // 月柱
  // String setuiriNitiS = // 仮の節入り日の文字
  String d = nenchu + gechu + nichu;
  return d;
}

// 関数定義
//  d = meisiki(a,b,c)
// a: 西暦年（1920年〜2029年）数字
// b: 月の数字
// c: 日の習字
// d: 命式（年柱/月柱/日柱）（例：甲子乙丑丙寅）の6文字
// e: 節入り日（西暦年月日）（例：19570306）4文字2文字2文字
// f: 節入り時刻 (例：07:39)5文字
// g: 節入り日からの日数（例：3)数字 節入り日に等しい場合は1と表示する
String meisikiA(int a, int b, int c) {
  // 定数定義
  int nenchuNen = a;
  String jukkan = "甲乙丙丁戊己庚辛壬癸"; //十干リスト
  String juunisi = "子丑寅卯辰巳午未申酉戌亥"; //十二支リスト
  String rokujukkansi = // 60干支リスト
      "甲子乙丑丙寅丁卯戊辰己巳庚午辛未壬申癸酉"
      "甲戌乙亥丙子丁丑戊寅己卯庚辰辛巳壬午癸未"
      "甲申乙酉丙戌丁亥戊子己丑庚寅辛卯壬辰癸巳"
      "甲午乙未丙申丁酉戊戌己亥庚子辛丑壬寅癸卯"
      "甲辰乙巳丙午丁未戊申己酉庚戌辛亥壬子癸丑"
      "甲寅乙卯丙辰丁巳戊午己未庚申辛酉壬戌癸亥";
  String setuiriNitiL = // 節入り日リスト・2文字・1920年1月から2029年12月まで
      '060506050606070808080807' //1920
      '060406050606080808090808' //1921
      '060406050606080808090808' //1922
      '060506060607080809090808' //1923
      '060506050606070808080807' //1924
      '060406050606080808090807' //1925
      '060406050606080808090808' //1926
      '060506060607080809090808' //1927
      '060506050606070808080807' //1928
      '060406050606080808090807' //1929
      '060406050606080808090808' //1930
      '060506060607080809090808' //1931
      '060506050606070808080707' //1932
      '060406050606070808090807' //1933
      '060406050606080808090808' //1934
      '060506060607080808090808' //1935
      '060506050606070808080707' //1936
      '060406050606070808090807' //1937
      '060406050606080808090808' //1938
      '060506060606080808090808' //1939
      '060506050606070808080707' //1940
      '060406050606070808090807' //1941
      '060406050606080808090808' //1942
      '060506060606080808090808' //1943
      '060506050606070808080707' //1944
      '060406050606070808090807' //1945
      '060406050606080808090808' //1946
      '060506060606080808090808' //1947
      '060506050506070808080707' //1948
      '060406050606070808090807' //1949
      '060406050606080808090808' //1950
      '060506050606080808090808' //1951
      '060506050506070708080707' //1952
      '060406050606070808080807' //1953
      '060406050606080808090808' //1954
      '060406050606080808090808' //1955
      '060505050506070708080707' //1956
      '050406050606070808080807' //1957
      '060406050606080808090807' //1958
      '060406050606080808090808' //1959
      '060505050506070708080707' //1960
      '050406050606070808080807' //1961
      '060406050606070808090807' //1962
      '060406050606080808090808' //1963
      '060505050506070707080707' //1964
      '050406050606070808080807' //1965
      '060406050606070808090807' //1966
      '060406050606080808090808' //1967
      '060505050506070707080707' //1968
      '050406050606070808080707' //1969
      '060406050606070808090807' //1970
      '060406050606080808090808' //1971
      '060505050505070707080707' //1972
      '050406050606070808080707' //1973
      '060406050606070808090807' //1974
      '060406050606080808090808' //1975
      '060505050505070707080707' //1976
      '050406050606070808080707' //1977
      '060406050606070808090807' //1978
      '060406050606080808090808' //1979
      '060505050505070707080707' //1980
      '050406050506070708080707' //1981
      '060406050606070808090807' //1982
      '060406050606080808090808' //1983
      '060505040505070707080707' //1984
      '050406050506070708080707' //1985
      '060406050606070808080807' //1986
      '060406050606080808090808' //1987
      '060405040505070707080707' //1988
      '050405050506070708080707' //1989
      '050406050606070808080807' //1990
      '060406050606070808090807' //1991
      '060405040505070707080707' //1992
      '050405050506070708080707' //1993
      '050406050606070808080807' //1994
      '060406050606070808090807' //1995
      '060405040505070707080707' //1996
      '050405050506070707080707' //1997
      '050406050606070808080807' //1998
      '060406050606070808090807' //1999
      '060405040505070707080707' //2000
      '050405050505070707080707' //2001
      '050406050606070808080707' //2002
      '060406050606070808090807' //2003
      '060405040505070707080707' //2004
      '050405050505070707080707' //2005
      '050406050606070808080707' //2006
      '060406050606070808090807' //2007
      '060405040505070707080707' //2008
      '050405050505070707080707' //2009
      '050406050506070708080707' //2010
      '060406050606070808090807' //2011
      '060405040505070707080707' //2012
      '050405050505070707080707' //2013
      '050406050506070708080707' //2014
      '060406050606070808080807' //2015
      '060405040505070707080707' //2016
      '050405040505070707080707' //2017
      '050406050506070708080707' //2018
      '060406050606070808080807' //2019
      '060405040505070707080707' //2020
      '050305040505070707080707' //2021
      '050405050506070708080707' //2022
      '060406050606070808080807' //2023
      '060405040505060707080707' //2024
      '050305040505070707080707' //2025
      '050405050506070707080707' //2026
      '050406050606070808080807' //2027
      '060405040505060707080706' //2028
      '050305040505070707080707' //2029
      '';
  String setuiriJikokuL =
      '23:4011:2605:5011:1405:1109:5020:1805:5808:2623:2802:0418:30' //1920
      '05:3317:2011:4417:0811:0415:4102:0611:4314:0905:1007:4500:11' //1921
      '11:1623:0617:3322:5716:5221:3007:5717:3620:0611:0913:4506:10' //1922
      '17:1305:0023:2404:4522:3803:1413:4223:2401:5717:0319:4012:04' //1923
      '23:0510:4905:1210:3204:2509:0119:2905:1207:4522:5201:2917:52' //1924
      '04:5316:3610:5916:2210:1714:5601:2411:0613:3904:4707:2623:52' //1925
      '10:5422:3816:5922:1816:0820:4107:0516:4419:1510:2413:0705:38' //1926
      '16:4404:2922:5004:0521:5202:2412:4922:3101:0516:1418:5611:26' //1927
      '22:3110:1604:3709:5403:4308:1718:4404:2707:0122:0900:4917:17' //1928
      '04:2116:0810:3115:5109:4014:1000:3110:0812:3903:4606:2722:56' //1929
      '10:0221:5016:1621:3715:2619:5706:1915:5618:2809:3712:2004:50' //1930
      '15:5503:4022:0103:2021:0901:4112:0521:4400:1715:2618:0910:40' //1931
      '21:4409:2903:4909:0602:5407:2717:5203:3106:0221:0923:4916:18' //1932
      '03:2315:0909:3114:5008:4113:1723:4409:2511:5703:0305:4222:10' //1933
      '09:1621:0315:2620:4314:3019:0105:2415:0317:3508:4411:2603:56' //1934
      '15:0202:4821:1002:2620:1100:4111:0520:4723:2314:3517:1709:44' //1935
      '20:4608:2902:4808:0601:5606:3016:5802:4305:2020:3223:1415:42' //1936
      '02:4314:2508:4414:0107:5012:2222:4508:2510:5902:1004:5521:26' //1937
      '08:3120:1414:3319:4813:3518:0604:3114:1216:4708:0110:4803:21' //1938
      '14:2702:1020:2601:3719:2023:5110:1820:0322:4113:5616:4309:16' //1939
      '20:2308:0702:2307:3401:1605:4316:0701:5104:2919:4222:2614:57' //1940
      '02:0313:4908:0913:2407:0911:3922:0207:4510:2301:3804:2320:55' //1941
      '08:0219:4814:0919:2313:0617:3203:5113:3016:0607:2110:1102:46' //1942
      '13:5401:3919:5801:1118:5323:1809:3819:1821:5513:1015:5808:32' //1943
      '19:3907:2201:4006:5300:3905:1015:3501:1803:5519:0821:5414:27' //1944
      '01:3413:1907:3712:5106:3611:0521:2607:0409:3800:4903:3420:07' //1945
      '07:1619:0313:2418:3812:2116:4803:1012:5115:2706:4009:2702:00' //1946
      '13:0600:5019:0700:2018:0222:3108:5518:4021:2112:3715:2407:56' //1947
      '19:0006:4100:5706:0923:5204:2014:4300:2603:0418:2021:0613:37' //1948
      '00:4112:2206:3911:5105:3610:0620:3106:1408:5400:1002:5919:33' //1949
      '06:3818:2012:3517:4411:2415:5002:1311:5514:3305:5108:4301:21' //1950
      '12:3000:1318:2623:3217:0921:3207:5317:3720:1811:3614:2607:02' //1951
      '18:0905:5200:0705:1522:5303:2013:4423:3002:1317:3220:2112:55' //1952
      '00:0111:4506:0211:1204:5209:1619:3405:1407:5223:1002:0018:36' //1953
      '05:4517:3011:4816:5910:3815:0001:1910:5913:3704:5707:5000:28' //1954
      '11:3523:1717:3022:3816:1720:4307:0516:5019:3110:5213:4506:22' //1955
      '17:3005:1123:2404:3122:0902:3512:5822:4001:1816:3519:2512:02' //1956
      '23:1010:5405:1010:1803:5808:2418:4804:3207:1222:2901:2017:55' //1957
      '05:0416:4911:0416:1209:4914:1200:3310:1712:5804:1907:1123:49' //1958
      '10:5822:4216:5622:0315:3820:0006:1916:0418:4710:0913:0205:37' //1959
      '16:4204:2322:3603:4321:2201:4812:1221:5900:4516:0819:0211:37' //1960
      '22:4210:2204:3409:4203:2107:4618:0603:4806:2921:5000:4617:25' //1961
      '04:3416:1710:2915:3409:0913:3123:5109:3312:1503:3706:3423:16' //1962
      '10:2622:0716:1721:1814:5219:1405:3715:2518:1109:3612:3205:12' //1963
      '16:2204:0422:1603:1820:5101:1111:3221:1623:5915:2118:1510:53' //1964
      '22:0209:4604:0009:0602:4107:0217:2103:0405:4721:1100:0616:45' //1965
      '03:5415:3709:5114:5608:3012:4923:0708:4911:3202:5605:5522:37' //1966
      '09:4821:3015:4120:4414:1718:3604:5314:3417:1708:4111:3704:17' //1967
      '15:2603:0721:1702:2119:5500:1910:4120:2723:1114:3417:2910:08' //1968
      '21:1608:5903:1008:1401:4906:1116:3102:1404:5520:1623:1115:51' //1969
      '03:0114:4508:5814:0107:3311:5222:1007:5410:3802:0104:5721:37' //1970
      '08:4520:2514:3419:3613:0817:2803:5113:4016:3007:5810:5603:35' //1971
      '14:4102:2020:2801:2819:0123:2109:4219:2822:1513:4116:3909:18' //1972
      '20:2508:0402:1207:1300:4605:0615:2701:1203:5919:2722:2715:10' //1973
      '02:1914:0008:0713:0406:3310:5121:1106:5709:4501:1404:1721:04' //1974
      '08:1719:5914:0519:0112:2716:4202:5912:4415:3307:0210:0202:46' //1975
      '13:5701:3919:4800:4618:1422:3108:5018:3821:2812:5815:5808:40' //1976
      '19:5107:3301:4406:4500:1504:3214:4700:3003:1518:4321:4514:30' //1977
      '01:4313:2607:3812:3906:0810:2320:3606:1709:0200:3003:3420:20' //1978
      '07:3119:1213:1918:1711:4716:0502:2412:1014:5906:3009:3202:17' //1979
      '13:2801:0919:1600:1417:4422:0308:2318:0820:5312:1915:1808:01' //1980
      '19:1206:5501:0506:0523:3403:5214:1123:5702:4318:0921:0813:51' //1981
      '01:0212:4506:5411:5205:2009:3519:5405:4108:3100:0203:0419:48' //1982
      '06:5818:3912:4717:4411:1015:2501:4311:2914:2005:5108:5201:33' //1983
      '12:4000:1818:2423:2216:5021:0807:2917:1720:0911:4214:4507:28' //1984
      '18:3506:1100:1605:1322:4202:5913:1823:0401:5317:2420:2913:16' //1985
      '00:2812:0706:1211:0604:3008:4419:0004:4507:3423:0602:1219:00' //1986
      '06:1317:5111:5316:4410:0514:1800:3810:2913:2404:5908:0500:52' //1987
      '12:0323:4217:4622:3916:0120:1406:3216:2019:1110:4413:4806:34' //1988
      '17:4505:2723:3404:2921:5302:0512:1922:0300:5316:2719:3312:20' //1989
      '23:3311:1405:1910:1203:3507:4618:0003:4506:3722:1301:2318:14' //1990
      '05:2817:0811:1216:0409:2613:3823:5309:3712:2704:0107:0723:56' //1991
      '11:0822:4816:5221:4515:0819:2205:4015:2718:1809:5112:5705:44' //1992
      '16:5604:3722:4203:3721:0101:1511:3221:1700:0715:4018:4511:33' //1993
      '22:4810:3004:3709:3102:5407:0417:1903:0405:5521:2900:3517:22' //1994
      '04:3416:1210:1615:0808:3012:4223:0008:5111:4803:2706:3523:22' //1995
      '10:3122:0716:0921:0114:2518:4005:0014:4817:4209:1812:2605:14' //1996
      '16:2404:0122:0402:5620:1900:3210:4920:3623:2815:0518:1411:04' //1997
      '22:1809:5603:5708:4402:0306:1316:3002:1905:1520:5500:0817:01' //1998
      '04:1715:5709:5714:4408:0112:0922:2408:1411:0902:4805:5722:47' //1999
      '10:0021:4015:4220:3113:5017:5804:1314:0216:5908:3811:4804:37' //2000
      '15:4903:2821:3202:2419:4423:5310:0619:5222:4614:2517:3610:28' //2001
      '21:4309:2403:2708:1801:3705:4415:5601:3904:3120:0923:2116:14' //2002
      '03:2715:0509:0413:5207:1011:1921:3507:2410:2002:0005:1322:05' //2003
      '09:1820:5614:5519:4313:0217:1303:3113:1916:1207:4910:5803:48' //2004
      '15:0302:4320:4501:3418:5223:0109:1619:0321:5613:3316:4209:32' //2005
      '20:4608:2702:2807:1500:3004:3614:5100:4003:3919:2122:3415:26' //2006
      '02:4014:1808:1713:0406:2010:2720:4106:3109:2901:1104:2421:14' //2007
      '08:2420:0013:5818:4512:0316:1102:2612:1615:1406:5610:1003:02' //2008
      '14:1401:4919:4700:3317:5021:5908:1318:0120:5712:4015:5608:52' //2009
      '20:0807:4701:4606:3023:4403:4914:0223:4902:4418:2621:4214:38' //2010
      '01:5413:3207:2912:1105:2309:2719:4205:3308:3400:1903:3420:29' //2011
      '07:4319:2213:2118:0511:1915:2501:4011:3014:2906:1109:2502:18' //2012
      '13:3301:1319:1400:0217:1821:2307:3417:2020:1611:5815:1308:08' //2013
      '19:2407:0301:0205:4622:5903:0313:1423:0202:0117:4721:0614:04' //2014
      '01:2012:5806:5511:3904:5208:5819:1205:0107:5923:4202:5819:53' //2015
      '07:0818:4612:4317:2710:4114:4801:0310:5313:5105:3308:4701:41' //2016
      '12:5500:3418:3223:1716:3120:3606:5016:4019:3811:2214:3707:32' //2017
      '18:4806:2800:2805:1222:2502:2912:4122:3001:2917:1420:3113:25' //2018
      '00:3812:1406:0910:5104:0208:0618:2004:1307:1623:0502:2419:18' //2019
      '06:3018:0311:5616:3809:5113:5800:1410:0613:0804:5508:1301:09' //2020
      '12:2323:5817:5322:3515:4719:5206:0515:5318:5210:3913:5806:57' //2021
      '18:1405:5023:4304:2021:2501:2511:3821:2900:3216:2219:4512:46' //2022
      '00:0411:4205:3610:1303:1807:1817:3003:2206:2622:1501:3518:32' //2023
      '05:4917:2711:2216:0209:1013:0923:2009:0912:1103:5907:2000:17' //2024
      '11:3223:1017:0721:4814:5718:5605:0514:5117:5109:4113:0406:04' //2025
      '17:2305:0222:5903:3920:4800:4810:5620:4223:4115:2918:5211:52' //2026
      '23:0910:4604:3909:1702:2506:2516:3702:2605:2821:1700:3817:37' //2027
      '04:5416:3110:2415:0308:1212:1522:3008:2111:2203:0806:2723:24' //2028
      '10:4122:2016:1720:5814:0718:0904:2214:1117:1108:5812:1605:13' //2029
      '';

  // 日柱の六十干支を算出する
  DateTime nenGaPi = DateTime(a, b, c); // 年月日のDateTime型
  int nissuu = nenGaPi.difference(DateTime(1900, 1, 1)).inDays; // 1900.1.1からの日数
  int nikkan = nissuu % 10; // 日干No.を算出
  String nikkanMoji = jukkan.substring(nikkan, nikkan + 1); //日干を算出
  int nissi = (nissuu + 10) % 12; // 日支No.を算出
  String nissiMoji = juunisi.substring(nissi, nissi + 1); //日支を算出
  String nichu = nikkanMoji + nissiMoji;
  // 年と月から仮の節入り日・時・分を算出する
  int setuiriNen = a; // 仮の節入り年として、年を代入する
  int setuiriGe = b; // 仮の節入り月として、月を代入する
  int setuIndex = (setuiriNen - 1920) * 12 + (setuiriGe - 1); //
  String setuiriNitiS = // 仮の節入り日の文字
      setuiriNitiL.substring(setuIndex * 2, (setuIndex + 1) * 2);
  int setuiriNiti = int.parse(setuiriNitiS); // 仮の節入り日
  DateTime setuiribi2 = DateTime(setuiriNen, setuiriGe, setuiriNiti);
  int setuirinitisuu = nenGaPi.difference(setuiribi2).inDays; // 仮の節入り日からの日数
  // 仮の節入り日を迎えていない場合
  if (setuirinitisuu < 0) {
    if (b == 1) {
      setuiriNen = setuiriNen - 1; // 1月の場合
      nenchuNen = a - 1;
    } else if (b == 2) {
      nenchuNen = a - 1; // 2月の場合
    } else {} // 3月〜12月の場合
    setuiriGe = (b - 2) % 12 + 1;
  } else {
    if (b == 1) {
      nenchuNen = a - 1;
    } else {}
  }
  String setuiriNenMoji = setuiriNen.toString(); // 節入り年を文字に変換
  String setuiriGeMoji = setuiriGe.toString().padLeft(2, '0'); // 節入り月を文字に変換
  // 修正された節入り日時のためのIndexから節入り日時を算出する
  setuIndex = (setuiriNen - 1920) * 12 + (setuiriGe - 1); //
  String setuiriNiMoji =
      setuiriNitiL.substring(setuIndex * 2, (setuIndex + 1) * 2); // 節入り日　文字
  setuiriNiti = int.parse(setuiriNiMoji);
  String e = setuiriNenMoji + setuiriGeMoji + setuiriNiMoji; // 節入り年月日・8文字
  String f =
      setuiriJikokuL.substring(setuIndex * 5, (setuIndex + 1) * 5); //節入り時刻・5文字
  // 年柱を算出する
  int nenchuNo = (nenchuNen - 1900 + 36) % 60; // 年柱No.を算出する・補正値36
  String nenchu =
      rokujukkansi.substring(nenchuNo * 2, (nenchuNo + 1) * 2); // 年柱
  // 月柱を算出する
  int gechuNo = (setuIndex + 13) % 60; // 月柱No.を算出する・補正値13
  String gechu = rokujukkansi.substring(gechuNo * 2, (gechuNo + 1) * 2); // 月柱
  // String setuiriNitiS = // 仮の節入り日の文字
  String d = nenchu + gechu + nichu;

  setuiribi2 = DateTime(setuiriNen, setuiriGe, setuiriNiti); // 最終節入り日
  setuirinitisuu = nenGaPi.difference(setuiribi2).inDays + 1; // 節入り日からの日数
  String g = setuirinitisuu.toString().padLeft(2, ' ');
  String h = d + e + f + g;
  print(h);
  return h; //d:命式 e:節入り日 f:節入り時刻 g:節入り日からの日数
}
